{"version":3,"sources":["Form.js","Display.js","App.js","serviceWorker.js","index.js"],"names":["Form","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Display","className","city","state","country","temperature","tempFeelLike","description","API_KEY","cToF","celsius","App","undefined","temp","desc","e","a","preventDefault","target","elements","value","fetch","url","json","data","console","log","setState","city_name","state_code","country_code","app_temp","weather","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAyBeA,G,6KArBP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BACIC,KAAK,OACLC,KAAK,OACLC,YAAY,SAGhB,2BACIF,KAAK,OACLC,KAAK,QACLC,YAAY,uBAGhB,wD,GAhBGC,IAAMC,YC2BVC,EA3BC,SAAAP,GAAK,OACpB,yBAAKQ,UAAU,gBAEbR,EAAMS,MAAQT,EAAMU,OAAS,wCAC5B,kCAASV,EAAMS,KAAf,KAAyBT,EAAMU,MAA/B,KAAyCV,EAAMW,UAIhDX,EAAMY,aAAe,2CACpB,kCAASZ,EAAMY,YAAf,MAIDZ,EAAMa,cAAgB,sDACrB,kCAASb,EAAMa,aAAf,MAKDb,EAAMc,aAAe,kDACpB,kCAASd,EAAMc,YAAf,QChBEC,EAAU,mCAEhB,SAASC,EAAKC,GAIZ,OADmB,EADPA,EACU,EAAI,G,IAkDbC,E,4MA5CbR,MAAQ,CACND,UAAMU,EACNT,WAAOS,EACPR,aAASQ,EACTC,UAAMD,EACNN,kBAAcM,EACdE,UAAMF,G,EAGNlB,W,uCAAa,WAAMqB,GAAN,qBAAAC,EAAA,6DACXD,EAAEE,iBACIf,EAAOa,EAAEG,OAAOC,SAASjB,KAAKkB,MAC9BjB,EAAQY,EAAEG,OAAOC,SAAShB,MAAMiB,MAH3B,SAKOC,MAAM,+CAAD,OAAgDnB,EAAhD,YAAwDC,EAAxD,gBAAqEK,IALjF,cAKLc,EALK,gBAOQA,EAAIC,OAPZ,OAOLC,EAPK,OAQXC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZzB,KAAMsB,EAAKA,KAAK,GAAGI,UACnBzB,MAAOqB,EAAKA,KAAK,GAAGK,WACpBzB,QAASoB,EAAKA,KAAK,GAAGM,aACtBzB,YAAaI,EAAKe,EAAKA,KAAK,GAAGX,MAC/BP,aAAcG,EAAKe,EAAKA,KAAK,GAAGO,UAChCjB,KAAMU,EAAKA,KAAK,GAAGQ,QAAQzB,cAflB,4C,6GAoBb,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,CAAMP,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACIW,YAAab,KAAKW,MAAME,YACxBC,aAAcd,KAAKW,MAAMG,aACzBJ,KAAMV,KAAKW,MAAMD,KACjBC,MAAOX,KAAKW,MAAMA,MAClBC,QAASZ,KAAKW,MAAMC,QACpBG,YAAaf,KAAKW,MAAMW,Y,GAxClBhB,IAAMC,WCHJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.d8cb8059.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Form extends React.Component{\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    placeholder=\"city\"\r\n                />\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"state\"\r\n                    placeholder=\"state abbreviation\"\r\n                />\r\n\r\n                <button>Display Weather</button>\r\n            </form>\r\n        );\r\n    \r\n    }\r\n};\r\n\r\nexport default Form; ","import React from \"react\";\r\n\r\nconst Display = props => (\r\n\t<div className=\"weather_info\">\r\n\t{\t\r\n\t \tprops.city && props.state && <p> Location: \r\n\t \t\t<span> { props.city }, { props.state }  {props.country}</span>\r\n\t \t</p> \r\n\t}\r\n\t{ \t\r\n\t \tprops.temperature && <p> Temperature: \r\n\t \t\t<span> { props.temperature }\t</span>\r\n\t \t</p> \r\n\t}\r\n    { \t\r\n\t \tprops.tempFeelLike && <p> Temperature feels like: \r\n\t \t\t<span> { props.tempFeelLike }\t</span>\r\n\t \t</p> \r\n\t }\r\n\t \r\n\t { \t\r\n\t \tprops.description && <p> Weather Conditions: \r\n\t \t\t<span> { props.description } </span>\r\n\t </p> \r\n\t }\r\n\t \r\n\t</div>\r\n);\r\n\r\nexport default Display;","import React from 'react';\nimport './App.css';\n\nimport Form from './Form.js';\nimport Display from './Display.js';\n\nconst API_KEY = '8333df0a67c64adeb6f71f2a2dfcbb32';\n\nfunction cToF(celsius)\n{\n  var cTemp = celsius;\n  var cToF = cTemp * 9 /5 + 32;\n  return (cToF);\n}\n\nclass App extends React.Component{\n  \n  state = {\n    city: undefined, //city_name\n    state: undefined, //state_code\n    country: undefined, //country_code\n    temp: undefined, //temp\n    tempFeelLike: undefined, //app_temp\n    desc: undefined //weather.description\n\n  }\n    getWeather = async(e) => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const state = e.target.elements.state.value;\n      \n      const url = await fetch(`https://api.weatherbit.io/v2.0/current?city=${city},${state}&key=${API_KEY}`);\n\n      const data = await url.json();\n      console.log(data);\n      this.setState({\n        city: data.data[0].city_name,\n        state: data.data[0].state_code,\n        country: data.data[0].country_code,\n        temperature: cToF(data.data[0].temp),\n        tempFeelLike: cToF(data.data[0].app_temp),\n        desc: data.data[0].weather.description\n      });\n    }\n \n  render() {\n    return (\n      <div className=\"App\">\n        <Form getWeather={this.getWeather}/>\n        <Display \n            temperature={this.state.temperature}\n            tempFeelLike={this.state.tempFeelLike} \n            city={this.state.city}\n            state={this.state.state}\n            country={this.state.country}\n            description={this.state.desc}\n        />         \n      </div>\n    );\n  }\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}